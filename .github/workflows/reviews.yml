name: Build and Push Reviews OCI Image

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    paths:
      - 'reviews/**'
      - '.github/workflows/reviews.yml'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: reviews

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx for OCI
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:master
            
      - name: Log in to Container Registry  
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata for OCI
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix=sha-,format=short
            type=raw,value=latest,enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.title=Reviews Subgraph
            org.opencontainers.image.description=Apollo Federation subgraph for product reviews
            org.opencontainers.image.vendor=${{ github.repository_owner }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            
      - name: Build and push OCI image
        uses: docker/build-push-action@v5
        with:
          context: ./reviews
          file: ./reviews/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=image,oci-mediatypes=true,compression=gzip,rewrite-timestamp=true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: mode=max
          sbom: true
          
      - name: Verify OCI image format
        run: |
          echo "‚úÖ OCI image built and pushed successfully"
          echo "üè∑Ô∏è  Tags: ${{ steps.meta.outputs.tags }}"
          echo "üìã Labels: ${{ steps.meta.outputs.labels }}"
          echo ""
          echo "The image has been built with:"
          echo "  ‚Ä¢ OCI media types: enabled"
          echo "  ‚Ä¢ Multi-platform: linux/amd64,linux/arm64" 
          echo "  ‚Ä¢ Compression: gzip"
          echo "  ‚Ä¢ Provenance: enabled"
          echo "  ‚Ä¢ SBOM: enabled"
          echo "  ‚Ä¢ Timestamp normalization: enabled"